--박지성이 구입한 책의 합계금액
SELECT CUSTID FROM CUSTOMER WHERE NAME = '박지성'; --CUSTID:1
--구입 내역 확인
SELECT * FROM ORDERS WHERE CUSTID = 1;

--서브쿼리(SUB QUERY) 방식
SELECT * FROM ORDERS 
WHERE CUSTID = (SELECT CUSTID FROM CUSTOMER WHERE NAME = '박지성');
---------------------

--테이블 조인(JOIN) 방식
SELECT * FROM CUSTOMER WHERE CUSTID = 1;
SELECT * FROM ORDERS WHERE CUSTID = 1;

--CUSTOMER, ORDERS 테이블 데이터 동시 조회
SELECT *
FROM CUSTOMER, ORDERS
WHERE CUSTOMER.CUSTID = ORDERS.CUSTID --조인조건
AND CUSTOMER.NAME = '박지성' --찾을조건(WHERE)
;

--테이블 별칭 사용으로 간단하게 표시하고 사용
--WHERE절 조인조건 사용 - 오라클 사용방식
SELECT *
FROM CUSTOMER C, ORDERS O
WHERE C.CUSTID = O.CUSTID --조인조건
AND C.NAME = '박지성' --찾을조건(WHERE)
;
--ANSI 표준 조인 쿼리
SELECT *
FROM CUSTOMER C INNER JOIN ORDERS O --조인방식 지정
     ON C.CUSTID = O.CUSTID --조인조건 지정
WHERE C.NAME = '박지성' --검색조건
;
-------------------
--박지성이 구입한 책의 합계금액
SELECT SUM(O.SALEPRICE) AS SUM_SALEPRICE
FROM CUSTOMER C, ORDERS O
WHERE C.CUSTID = O.CUSTID

    AND C.NAME = '박지성';

--조인된 데이터에서 컬럼조회시 : 테이블명(별칭).컬럼명 형태로 사용
SELECT C.CUSTID     --양쪽 테이블에 동일 컬럼명 존재하는 경우 위치 지정 필수
        ,C.NAME, C.ADDRESS, O.CUSTID AS ORD_CUSTID  --조회된 컬럼명 중복시 별칭으로 다르게 지정
        ,O.SALEPRICE, O.ORDERDATE
FROM CUSTOMER C, ORDERS O       --조인할 테이블
WHERE C.CUSTID = O.CUSTID       --조인조건
AND C.NAME = '박지성';           --검색조건

--출판한 책중 판매된 책목록(미디어로 끝나는 출판사)
SELECT *
FROM BOOK B, ORDERS O
WHERE B.BOOKID = O.BOOKID   --조인조건
--AND PUBLISHER LIKE '%미디어'
--AND PUBLISHER = '굿스포츠'
ORDER BY B.PUBLISHER, B.BOOKNAME
;

--(실습)
--1.'야구를 부탁해'라는 책이 팔린 내역 확인(책 제목, 판매금액, 판매일자)
SELECT B.BOOKNAME, O.SALEPRICE, O.ORDERDATE
FROM BOOK B, ORDERS O
WHERE B.BOOKID = O.BOOKID
AND B.BOOKNAME = '야구를 부탁해';

--표준 조인 쿼리
SELECT B.BOOKNAME, O.SALEPRICE, O.ORDERDATE
FROM BOOK B INNER JOIN ORDERS O 
    ON B.BOOKID = O.BOOKID
WHERE B.BOOKNAME = '야구를 부탁해';

--2.'야구를 부탁해'라는 책이 몇권이 팔렸는지 확인
SELECT COUNT(O.SALEPRICE) AS COUNT_SALE
FROM ORDERS O, BOOK B
WHERE B.BOOKID = O.BOOKID
AND B.BOOKNAME = '야구를 부탁해';

--표준 조인 쿼리
SELECT COUNT(O.SALEPRICE) AS COUNT_SALE
FROM ORDERS O INNER JOIN BOOK B
ON B.BOOKID = O.BOOKID
WHERE B.BOOKNAME = '야구를 부탁해';

--3.'추신수'가 구입한 책값과 구입일자를 확인(책값, 구입일자)
SELECT O.SALEPRICE, O.ORDERDATE
FROM ORDERS O, CUSTOMER C 
WHERE O.CUSTID = C.CUSTID
AND C.NAME = '추신수';

--표준 조인 쿼리
SELECT O.SALEPRICE, O.ORDERDATE
FROM ORDERS O INNER JOIN CUSTOMER C
ON O.CUSTID = C.CUSTID
WHERE C.NAME = '추신수';

--4.'추신수'가 구입한 합계금액 확인
SELECT '추신수' AS CUST_NAME, SUM(O.SALEPRICE) AS SUM_SALEPRICE
FROM ORDERS O, CUSTOMER C
WHERE O.CUSTID = C.CUSTID
AND C.NAME = '추신수';

--표준 조인 쿼리
SELECT SUM(O.SALEPRICE) AS SUM_SALEPRICE
FROM ORDERS O INNER JOIN CUSTOMER C
ON O.CUSTID = C.CUSTID
WHERE C.NAME = '추신수';

--5.'박지성', '추신수'가 구입한 내역확인(이름, 판매금액, 판매일자)
SELECT C.NAME, O.SALEPRICE, O.ORDERDATE
FROM CUSTOMER C, ORDERS O
WHERE O.CUSTID = C.CUSTID
AND C.NAME IN ('박지성', '추신수');

--표준 조인 쿼리
SELECT C.NAME, O.SALEPRICE, O.ORDERDATE
FROM CUSTOMER C INNER JOIN ORDERS O
ON O.CUSTID = C.CUSTID
WHERE C.NAME IN ('박지성', '추신수');

----------------------------------------
--CUSTOMER, BOOK, ORDERS 테이블 조인
--고객명, 책제목, 판매가격, 판매일자, 출판사명
SELECT C.NAME, B.BOOKNAME, O.SALEPRICE, O.ORDERDATE
FROM ORDERS O, BOOK B, CUSTOMER C
WHERE O.BOOKID = B.BOOKID
    AND O.CUSTID = C.CUSTID;
--    AND C.NAME = '박지성';

--ANSI 표준 SQL
SELECT C.NAME, B.BOOKNAME, O.SALEPRICE, O.ORDERDATE
FROM ORDERS O 
    INNER JOIN BOOK B
    ON O.BOOKID = B.BOOKID 
    INNER JOIN CUSTOMER C
    ON O.CUSTID = C.CUSTID;

--(실습) BOOK, CUSTOMER, ORDERS 테이블 데이터 조회
--1.장미란이 구입한 책제목, 구입가격, 구입일자, 출판사
SELECT C.NAME, B.BOOKNAME, O.SALEPRICE, O.ORDERDATE, B.PUBLISHER
FROM BOOK B, ORDERS O, CUSTOMER C
WHERE O.BOOKID = B.BOOKID
    AND O.CUSTID = C.CUSTID
    AND C.NAME = '장미란';
    
SELECT C.NAME, B.BOOKNAME, O.SALEPRICE, O.ORDERDATE, B.PUBLISHER
FROM ORDERS O 
    INNER JOIN BOOK B
    ON O.BOOKID = B.BOOKID 
    INNER JOIN CUSTOMER C
    ON O.CUSTID = C.CUSTID
where c.name = '장미란';

--2.장미란이 구입한 책 중에 2014-01-01 ~ 2014-07-08까지 구입한 내역
SELECT C.NAME, B.BOOKNAME, O.ORDERDATE
FROM CUSTOMER C, BOOK B, ORDERS O
WHERE C.CUSTID = O.CUSTID
    AND O.BOOKID = B.BOOKID
    AND C.NAME = '장미란'
    AND (O.ORDERDATE >= '2014-01-01' AND O.ORDERDATE <= '2014-07-08');
    
SELECT O.ORDERDATE, TO_CHAR(O.ORDERDATE, 'YYYY-MM-DD HH24:MI:SS')
FROM ORDERS O, BOOK B, CUSTOMER C
WHERE O.BOOKID = B.BOOKID
  AND O.CUSTID = C.CUSTID
  AND C.NAME = '장미란'
  AND O.ORDERDATE BETWEEN TO_DATE('2014-01-01', 'YYYY-MM-DD')
                      AND TO_DATE('2014-07-08', 'YYYY-MM-DD')
;
    
    
--3.'야구를 부탁해'라는 책을 구입한 사람과 구입일자를 확인
SELECT C.NAME, O.ORDERDATE, B.BOOKNAME
FROM CUSTOMER C, BOOK B, ORDERS O
WHERE C.CUSTID = O.CUSTID
    AND O.BOOKID = B.BOOKID
    AND BOOKNAME = '야구를 부탁해';

SELECT B.BOOKNAME, C.NAME, O.ORDERDATE
FROM ORDERS O INNER JOIN BOOK B
ON B.BOOKID = O.BOOKID
INNER JOIN CUSTOMER C
ON O.CUSTID = C.CUSTID
WHERE B.BOOKNAME = '야구를 부탁해';

--4.추신수, 장미란이 구입한 책제목, 구입금액, 구입일자 확인(정렬: 고객명, 구입일자순)
SELECT C.NAME, B.BOOKNAME, O.SALEPRICE, O.ORDERDATE
FROM CUSTOMER C, BOOK B, ORDERS O
WHERE C.CUSTID = O.CUSTID
    AND O.BOOKID = B.BOOKID
    AND C.NAME IN('추신수', '장미란') ORDER BY C.NAME, O.ORDERDATE;

SELECT C.NAME, B.BOOKNAME, O.SALEPRICE, O.ORDERDATE
FROM ORDERS O INNER JOIN BOOK B
ON B.BOOKID = O.BOOKID
INNER JOIN CUSTOMER C
ON O.CUSTID = C.CUSTID
WHERE C.NAME IN ('추신수', '장미란')
ORDER BY C.NAME, O.ORDERDATE;

--5.추신수가 구입한 책수량, 합계금액, 평균값, 가장비싼책금액, 가장싼책금액
SELECT '추신수' AS CUTOMER_NAME, COUNT(*), SUM(O.SALEPRICE), AVG(O.SALEPRICE),
        MAX(O.SALEPRICE), MIN(O.SALEPRICE)
FROM CUSTOMER C, ORDERS O
WHERE C.CUSTID = O.CUSTID AND C.NAME = '추신수';













